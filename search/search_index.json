{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome Welcome to BotCity's Framework Web Python package for RPA. Installation Latest release Using PyPI pip install botcity-framework-web Using conda-forge - Coming Soon conda install -c conda-forge botcity-framework-web Latest code pip install git + https : // github . com / botcity - dev / botcity - framework - web - python . git","title":"Home"},{"location":"index.html#welcome","text":"Welcome to BotCity's Framework Web Python package for RPA.","title":"Welcome"},{"location":"index.html#installation","text":"","title":"Installation"},{"location":"index.html#latest-release","text":"","title":"Latest release"},{"location":"index.html#using-pypi","text":"pip install botcity-framework-web","title":"Using PyPI"},{"location":"index.html#using-conda-forge-coming-soon","text":"conda install -c conda-forge botcity-framework-web","title":"Using conda-forge - Coming Soon"},{"location":"index.html#latest-code","text":"pip install git + https : // github . com / botcity - dev / botcity - framework - web - python . git","title":"Latest code"},{"location":"bot.html","text":"Framework The botcity.web module contains specialized implementations aimed at Desktop automation such as WebBot which is described below. You are expected to implement the action method of the DesktopBot class in your Bot class. Here is a very brief example of a bot which opens the BotCity website: from botcity.web import WebBot class Bot ( WebBot ): def action ( self , execution ): # Configure whether or not to run on headless mode self . headless = False # Opens the BotCity website. self . browse ( \"https://botcity.dev/en\" ) # Stop the browser and clean up self . stop_browser () if __name__ == '__main__' : Bot . main () botcity.web.bot.WebBot Base class for Web Bots. Users must implement the action method in their classes. Attributes: Name Type Description state State The internal state of this bot. maestro BotMaestroSDK an instance to interact with the BotMaestro server. add_image ( self , label , path ) Add an image into the state image map. Parameters: Name Type Description Default label str The image identifier required path str The path for the image on disk required Source code in web/bot.py def add_image ( self , label , path ): \"\"\" Add an image into the state image map. Args: label (str): The image identifier path (str): The path for the image on disk \"\"\" self . state . map_images [ label ] = path backspace ( self , wait = 0 ) Press Backspace key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def backspace ( self , wait = 0 ): \"\"\" Press Backspace key Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Back Space\" , virtual_kc = 0x8 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) browse ( self , url , wait = False ) Opens the browser on the given URL. Parameters: Name Type Description Default url str The URL to be visited. required wait bool Whether or not to wait for the loadEvent fo be fired. Defaults to False. False Source code in web/bot.py def browse ( self , url , wait = False ): \"\"\" Opens the browser on the given URL. Args: url (str): The URL to be visited. wait (bool): Whether or not to wait for the loadEvent fo be fired. Defaults to False. \"\"\" self . navigate_to ( url , wait = wait ) click ( self , wait_after = 300 , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' ) Click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. 300 clicks int Number of times to click. Defaults to 1. 1 interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 button str One of 'left', 'right', 'middle'. Defaults to 'left' 'left' Source code in web/bot.py @only_if_element def click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' ): \"\"\" Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" x , y = self . state . center () self . click_at ( x , y , clicks = clicks , button = button , interval_between_clicks = interval_between_clicks ) self . sleep ( wait_after ) click_at ( self , x , y , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' ) Click at the coordinate defined by x and y Parameters: Name Type Description Default x int The X coordinate required y int The Y coordinate required clicks int Number of times to click. Defaults to 1. 1 interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 button str One of 'left', 'right', 'middle'. Defaults to 'left' 'left' Source code in web/bot.py def click_at ( self , x , y , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' ): \"\"\" Click at the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" button_idx = [ \"None\" , \"left\" , \"right\" , \"middle\" ] idx = button_idx . index ( button ) self . _x = x self . _y = y for i in range ( clicks ): self . _input . dispatchMouseEvent ( type = \"mousePressed\" , x = x , y = y , button = button , buttons = idx , clickCount = 1 ) self . _input . dispatchMouseEvent ( type = \"mouseReleased\" , x = x , y = y , button = button , buttons = idx , clickCount = 1 ) self . sleep ( interval_between_clicks ) click_on ( self , label ) Click on the element. Parameters: Name Type Description Default label str The image identifier required Source code in web/bot.py @only_if_element def click_on ( self , label ): \"\"\" Click on the element. Args: label (str): The image identifier \"\"\" x , y = self . get_element_coords_centered ( label ) self . click ( x , y ) click_relative ( self , x , y , wait_after = 300 , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' ) Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required wait_after int Interval to wait after clicking on the element. 300 clicks int Number of times to click. Defaults to 1. 1 interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 button str One of 'left', 'right', 'middle'. Defaults to 'left' 'left' Source code in web/bot.py @only_if_element def click_relative ( self , x , y , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' ): \"\"\" Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" x = self . state . x () + x y = self . state . y () + y self . click_at ( x , y , clicks = clicks , button = button , interval_between_clicks = interval_between_clicks ) self . sleep ( wait_after ) control_a ( self , wait = 0 ) Press keys CTRL+A Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def control_a ( self , wait = 0 ): \"\"\" Press keys CTRL+A Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _input . dispatchKeyEvent ( type = \"keyDown\" , commands = [ \"SelectAll\" ]) self . _input . dispatchKeyEvent ( type = \"keyUp\" , commands = [ \"SelectAll\" ]) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) control_c ( self , wait = 0 ) Press keys CTRL+C Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def control_c ( self , wait = 0 ): \"\"\" Press keys CTRL+C Args: wait (int, optional): Wait interval (ms) after task \"\"\" cmd = ( \"var text = '';\" \"if (window.getSelection) {\" \" text = window.getSelection().toString();\" \"} else if (document.selection && document.selection.type != 'Control') {\" \" text = document.selection.createRange().text;\" \"}\" ) self . execute_javascript ( cmd ) cmd = ( \"if( null == document.getElementById('clipboardTransferText')) {\" \" let el = document.createElement('textarea');\" \" el.value = '';\" \" el.setAttribute('readonly', '');\" \" el.style = {position: 'absolute', left: '-9999px'};\" \" el.id = 'clipboardTransferText';\" \" document.body.appendChild(el);\" \"}\" \"document.getElementById('clipboardTransferText').value = text;\" ) self . execute_javascript ( cmd ) self . _input . dispatchKeyEvent ( type = \"keyDown\" , commands = [ \"Copy\" ]) self . _input . dispatchKeyEvent ( type = \"keyUp\" , commands = [ \"Copy\" ]) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) control_v ( self , wait = 0 ) Press keys CTRL+V Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def control_v ( self , wait = 0 ): \"\"\" Press keys CTRL+V Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _input . dispatchKeyEvent ( type = \"keyDown\" , commands = [ \"Paste\" ]) self . _input . dispatchKeyEvent ( type = \"keyUp\" , commands = [ \"Paste\" ]) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) copy_to_clipboard ( self , text , wait = 0 ) Copy content to the clipboard. Parameters: Name Type Description Default text str The text to be copied. required wait int Wait interval (ms) after task 0 Source code in web/bot.py def copy_to_clipboard ( self , text , wait = 0 ): \"\"\" Copy content to the clipboard. Args: text (str): The text to be copied. wait (int, optional): Wait interval (ms) after task \"\"\" if not self . headless : pyperclip . copy ( text ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) else : raise RuntimeError ( \"The clipboard functionality is only available outside of Headless mode.\" ) delete ( self , wait = 0 ) Press Delete key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def delete ( self , wait = 0 ): \"\"\" Press Delete key Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Delete\" , virtual_kc = 46 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) display_size ( self ) Returns the display size in pixels. Returns: Type Description size (Tuple) The screen dimension (width and height) in pixels. Source code in web/bot.py def display_size ( self ): \"\"\" Returns the display size in pixels. Returns: size (Tuple): The screen dimension (width and height) in pixels. \"\"\" screen_size = self . get_viewport_size () return screen_size . width , screen_size . height double_click ( self , wait_after = 300 ) Double Click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. 300 Source code in web/bot.py @only_if_element def double_click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Double Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" x , y = self . state . center () self . click ( x , y , wait_after = wait_after , click = 2 ) double_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = 300 ) Double Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 wait_after int Interval to wait after clicking on the element. 300 Source code in web/bot.py @only_if_element def double_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Double Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" x = self . state . x () + x y = self . state . y () + y self . click_relative ( x , y , wait_after = wait_after , click = 2 , interval_between_clicks = interval_between_clicks ) enter ( self , wait = 0 ) Press key Enter Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def enter ( self , wait = 0 ): \"\"\" Press key Enter Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Enter\" , virtual_kc = 13 , text = \" \\r \" ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) execute_javascript ( self , code ) Execute the given javascript code. Parameters: Name Type Description Default code str The code to be executed. required Returns: Type Description value (object) Returns the code output or None if not available or if an error happens. Source code in web/bot.py def execute_javascript ( self , code ): \"\"\" Execute the given javascript code. Args: code (str): The code to be executed. Returns: value (object): Returns the code output or None if not available or if an error happens. \"\"\" # TODO: Check for errors and return the error as well output = self . _run . evaluate ( expression = code ) if output : result = output [ 0 ][ 'result' ] . get ( 'result' ) if result : return result . get ( 'value' ) return None find ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ) Find an element defined by label on screen until a timeout happens. Parameters: Name Type Description Default label str The image identifier required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True grayscale bool Whether or not to convert to grayscale before searching. Defaults to False. False Returns: Type Description element (NamedTuple) The element coordinates. None if not found. Source code in web/bot.py def find ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" return self . find_until ( label = label , x = x , y = y , width = width , height = height , threshold = threshold , matching = matching , waiting_time = waiting_time , best = best , grayscale = grayscale ) find_multiple ( self , labels , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ) Find multiple elements defined by label on screen until a timeout happens. Parameters: Name Type Description Default labels list A list of image identifiers required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True grayscale bool Whether or not to convert to grayscale before searching. Defaults to False. False Returns: Type Description results (dict) A dictionary in which the key is the label and value are the element coordinates in a NamedTuple. Source code in web/bot.py def find_multiple ( self , labels , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ): \"\"\" Find multiple elements defined by label on screen until a timeout happens. Args: labels (list): A list of image identifiers x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: results (dict): A dictionary in which the key is the label and value are the element coordinates in a NamedTuple. \"\"\" def _to_dict ( lbs , elems ): return { k : v for k , v in zip ( lbs , elems )} screen_w , screen_h = self . get_viewport_size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) results = [ None ] * len ( labels ) paths = [ self . state . map_images [ la ] for la in labels ] if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) if not best : # TODO: Implement best=False. print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) start_time = time . time () n_cpus = multiprocessing . cpu_count () - 1 while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return _to_dict ( labels , results ) haystack = self . screenshot () helper = functools . partial ( self . __find_multiple_helper , haystack , region , matching , grayscale ) with multiprocessing . Pool ( processes = n_cpus ) as pool : results = pool . map ( helper , paths ) results = [ r for r in results ] if None in results : continue else : return _to_dict ( labels , results ) find_text ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True ) Find an element defined by label on screen until a timeout happens. Parameters: Name Type Description Default label str The image identifier required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True Returns: Type Description element (NamedTuple) The element coordinates. None if not found. Source code in web/bot.py def find_text ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" return self . find_until ( label , x , y , width , height , threshold = threshold , matching = matching , waiting_time = waiting_time , best = best , grayscale = True ) find_until ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ) Find an element defined by label on screen until a timeout happens. Parameters: Name Type Description Default label str The image identifier required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True grayscale bool Whether or not to convert to grayscale before searching. Defaults to False. False Returns: Type Description element (NamedTuple) The element coordinates. None if not found. Source code in web/bot.py def find_until ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" self . state . element = None screen_w , screen_h = self . get_viewport_size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) element_path = self . state . map_images [ label ] if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) if not best : # TODO: Implement best=False. print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) start_time = time . time () while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return None haystack = self . get_screen_image ( region = region ) it = cv2find . locate_all_opencv ( element_path , haystack_image = haystack , region = region , confidence = matching , grayscale = grayscale ) try : ele = next ( it ) except StopIteration : ele = None self . state . element = ele return ele get_clipboard ( self ) Get the current content in the clipboard. Returns: Type Description text (str) Current clipboard content Source code in web/bot.py def get_clipboard ( self ): \"\"\" Get the current content in the clipboard. Returns: text (str): Current clipboard content \"\"\" ret = self . execute_javascript ( \"document.getElementById('clipboardTransferText').value\" ) if ret : self . _last_clipboard = ret self . execute_javascript ( \"document.getElementById('clipboardTransferText').remove();\" ) return ret return self . _last_clipboard get_element_coords ( self , label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True ) Find an element defined by label on screen and returns its coordinates. Parameters: Name Type Description Default label str The image identifier required x int X (Left) coordinate of the search area. None y int Y (Top) coordinate of the search area. None width int Width of the search area. None height int Height of the search area. None matching float Minimum score to consider a match in the element image recognition process. Defaults to 0.9. 0.9 best bool Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. True Returns: Type Description coords (Tuple) A tuple containing the x and y coordinates for the element. Source code in web/bot.py def get_element_coords ( self , label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True ): \"\"\" Find an element defined by label on screen and returns its coordinates. Args: label (str): The image identifier x (int, optional): X (Left) coordinate of the search area. y (int, optional): Y (Top) coordinate of the search area. width (int, optional): Width of the search area. height (int, optional): Height of the search area. matching (float, optional): Minimum score to consider a match in the element image recognition process. Defaults to 0.9. best (bool, optional): Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. Returns: coords (Tuple): A tuple containing the x and y coordinates for the element. \"\"\" self . state . element = None screen_size = self . get_viewport_size () x = x or 0 y = y or 0 width = width or screen_size . width height = height or screen_size . height region = ( x , y , width , height ) if not best : print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) it = cv2find . locate_all_opencv ( self . state . map_images [ label ], region = region , confidence = matching ) try : ele = next ( it ) except StopIteration : ele = None self . state . element = ele if ele : return ele . left , ele . top else : return None , None get_element_coords_centered ( self , label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True ) Find an element defined by label on screen and returns its centered coordinates. Parameters: Name Type Description Default label str The image identifier required x int X (Left) coordinate of the search area. None y int Y (Top) coordinate of the search area. None width int Width of the search area. None height int Height of the search area. None matching float Minimum score to consider a match in the element image recognition process. Defaults to 0.9. 0.9 best bool Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. True Returns: Type Description coords (Tuple) A tuple containing the x and y coordinates for the center of the element. Source code in web/bot.py def get_element_coords_centered ( self , label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True ): \"\"\" Find an element defined by label on screen and returns its centered coordinates. Args: label (str): The image identifier x (int, optional): X (Left) coordinate of the search area. y (int, optional): Y (Top) coordinate of the search area. width (int, optional): Width of the search area. height (int, optional): Height of the search area. matching (float, optional): Minimum score to consider a match in the element image recognition process. Defaults to 0.9. best (bool, optional): Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. Returns: coords (Tuple): A tuple containing the x and y coordinates for the center of the element. \"\"\" self . get_element_coords ( label , x , y , width , height , matching , best ) return self . state . center () get_image_from_map ( self , label ) Return an image from teh state image map. Parameters: Name Type Description Default label str The image identifier required Returns: Type Description Image The Image object Source code in web/bot.py def get_image_from_map ( self , label ): \"\"\" Return an image from teh state image map. Args: label (str): The image identifier Returns: Image: The Image object \"\"\" path = self . state . map_images . get ( label ) if not path : raise KeyError ( 'Invalid label for image map.' ) img = Image . open ( path ) return img get_last_element ( self ) Return the last element found. Returns: Type Description element (NamedTuple) The element coordinates (left, top, width, height) Source code in web/bot.py def get_last_element ( self ): \"\"\" Return the last element found. Returns: element (NamedTuple): The element coordinates (left, top, width, height) \"\"\" return self . state . element get_last_x ( self ) Get the last X position for the mouse. Returns: Type Description x (int) The last x position for the mouse. Source code in web/bot.py @only_if_element def get_last_x ( self ): \"\"\" Get the last X position for the mouse. Returns: x (int): The last x position for the mouse. \"\"\" return self . _x get_last_y ( self ) Get the last Y position for the mouse. Returns: Type Description y (int) The last y position for the mouse. Source code in web/bot.py def get_last_y ( self ): \"\"\" Get the last Y position for the mouse. Returns: y (int): The last y position for the mouse. \"\"\" return self . _y get_screen_image ( self , region = None ) Capture and returns a screenshot from the browser. Parameters: Name Type Description Default region tuple A tuple containing the left, top, width and height to crop the screen image. None Returns: Type Description image (Image) The screenshot Image object. Source code in web/bot.py def get_screen_image ( self , region = None ): \"\"\" Capture and returns a screenshot from the browser. Args: region (tuple): A tuple containing the left, top, width and height to crop the screen image. Returns: image (Image): The screenshot Image object. \"\"\" if not region : region = ( 0 , 0 , 0 , 0 ) layout_metrics = self . _page . getLayoutMetrics ()[ 0 ] if layout_metrics : content_size = layout_metrics [ 'result' ][ 'contentSize' ] x = region [ 0 ] or 0 y = region [ 1 ] or 0 width = region [ 2 ] or content_size [ 'width' ] height = region [ 3 ] or content_size [ 'height' ] else : x = 0 y = 0 width = self . _dimensions [ 0 ] height = self . _dimensions [ 1 ] viewport = dict ( x = x , y = y , width = width , height = height , scale = 1 ) data = self . _page . captureScreenshot ( format = \"png\" , quality = 100 , clip = viewport , fromSurface = True , captureBeyondViewport = False ) data = data [ 0 ][ 'result' ][ 'data' ] image = base64 . b64decode ( data ) return Image . open ( io . BytesIO ( image )) get_screenshot ( self , filepath = None , region = None ) Capture a screenshot. Parameters: Name Type Description Default filepath str The filepath in which to save the screenshot. Defaults to None. None region tuple Bounding box containing left, top, width and height to crop screenshot. None Returns: Type Description Image The screenshot Image object Source code in web/bot.py def get_screenshot ( self , filepath = None , region = None ): \"\"\" Capture a screenshot. Args: filepath (str, optional): The filepath in which to save the screenshot. Defaults to None. region (tuple, optional): Bounding box containing left, top, width and height to crop screenshot. Returns: Image: The screenshot Image object \"\"\" return self . screenshot ( filepath , region ) get_viewport_size ( self ) Returns the browser current viewport size. Returns: Type Description width (int) The current viewport width. height (int): The current viewport height. Source code in web/bot.py def get_viewport_size ( self ): \"\"\" Returns the browser current viewport size. Returns: width (int): The current viewport width. height (int): The current viewport height. \"\"\" layout_metrics = self . _page . getLayoutMetrics () content_size = layout_metrics [ 0 ][ 'result' ][ 'contentSize' ] width = content_size [ 'width' ] height = content_size [ 'height' ] return width , height get_window_id ( self ) Fetch the current window Id Returns: Type Description id (str) The window Id Source code in web/bot.py def get_window_id ( self ): \"\"\" Fetch the current window Id Returns: id (str): The window Id \"\"\" return self . _devtools_service . Browser . getWindowForTarget ()[ 0 ][ 'result' ][ 'windowId' ] hold_shift ( self , wait = 0 ) Hold key Shift Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def hold_shift ( self , wait = 0 ): \"\"\" Hold key Shift Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _shift_hold = True delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) kb_type ( self , text , interval = 0 ) Type a text char by char (individual key events). Parameters: Name Type Description Default text str text to be typed. required interval int interval (ms) between each key press. Defaults to 0 0 Source code in web/bot.py def kb_type ( self , text , interval = 0 ): \"\"\" Type a text char by char (individual key events). Args: text (str): text to be typed. interval (int, optional): interval (ms) between each key press. Defaults to 0 \"\"\" for c in text : self . _dispatch_key_event ( event_type = \"char\" , text = c , execute_up = False ) self . sleep ( interval ) self . sleep ( config . DEFAULT_SLEEP_AFTER_ACTION ) key_end ( self , wait = 0 ) Press key End Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def key_end ( self , wait = 0 ): \"\"\" Press key End Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"End\" , virtual_kc = 35 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) key_enter ( self , wait = 0 ) Press key Right Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def key_enter ( self , wait = 0 ): \"\"\" Press key Right Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . enter ( wait ) key_esc ( self , wait = 0 ) Press key Esc Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def key_esc ( self , wait = 0 ): \"\"\" Press key Esc Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Escape\" , virtual_kc = 27 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) key_right ( self , wait = 0 ) Press key Right Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def key_right ( self , wait = 0 ): \"\"\" Press key Right Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Right\" , virtual_kc = 0x27 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) maximize_window ( self ) Shortcut to maximize window on Windows OS. Source code in web/bot.py def maximize_window ( self ): \"\"\" Shortcut to maximize window on Windows OS. \"\"\" bounds = dict ( left = 0 , top = 0 , width = 0 , height = 0 , windowState = \"maximized\" ) self . _devtools_service . Browser . setWindowBounds ( windowId = self . get_window_id (), bounds = bounds ) self . sleep ( 1000 ) mouse_move ( self , x , y ) Mouse the move to the coordinate defined by x and y Parameters: Name Type Description Default x int The X coordinate required y int The Y coordinate required Source code in web/bot.py def mouse_move ( self , x , y ): \"\"\" Mouse the move to the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" self . _x = x self . _y = y self . _input . dispatchMouseEvent ( type = \"mouseMoved\" , x = x , y = y ) move ( self ) Move to the center position of last found item. Source code in web/bot.py @only_if_element def move ( self ): \"\"\" Move to the center position of last found item. \"\"\" x , y = self . state . center () self . move_to ( x , y ) move_random ( self , range_x , range_y ) Move randomly along the given x, y range. Parameters: Name Type Description Default range_x int Horizontal range required range_y int Vertical range required Source code in web/bot.py def move_random ( self , range_x , range_y ): \"\"\" Move randomly along the given x, y range. Args: range_x (int): Horizontal range range_y (int): Vertical range \"\"\" x = int ( random . random () * range_x ) y = int ( random . random () * range_y ) self . move_to ( x , y ) move_relative ( self , x , y ) Move the mouse relative to its current position. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required Source code in web/bot.py def move_relative ( self , x , y ): \"\"\" Move the mouse relative to its current position. Args: x (int): Horizontal offset y (int): Vertical offset \"\"\" x = self . get_last_x () + x y = self . get_last_y () + y self . move_to ( x , y ) move_to ( self , x , y ) Move the mouse relative to its current position. Parameters: Name Type Description Default x int The X coordinate required y int The Y coordinate required Source code in web/bot.py def move_to ( self , x , y ): \"\"\" Move the mouse relative to its current position. Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" self . _x = x self . _y = y self . _input . dispatchMouseEvent ( type = \"mouseMoved\" , x = x , y = y ) navigate_to ( self , url , wait = False ) Opens the browser on the given URL. Parameters: Name Type Description Default url str The URL to be visited. required wait bool Whether or not to wait for the loadEvent fo be fired. Defaults to False. False Source code in web/bot.py def navigate_to ( self , url , wait = False ): \"\"\" Opens the browser on the given URL. Args: url (str): The URL to be visited. wait (bool): Whether or not to wait for the loadEvent fo be fired. Defaults to False. \"\"\" self . start_browser () self . set_screen_resolution () self . _page . navigate ( url = url ) if wait : self . _devtools_service . wait_event ( \"Page.frameStoppedLoading\" , timeout = config . DEFAULT_NAVIGATE_TIMEOUT / 1000 ) paste ( self , text = None , wait = 0 ) Paste content from the clipboard. Parameters: Name Type Description Default text str The text to be pasted. Defaults to None None wait int Wait interval (ms) after task 0 Source code in web/bot.py def paste ( self , text = None , wait = 0 ): \"\"\" Paste content from the clipboard. Args: text (str, optional): The text to be pasted. Defaults to None wait (int, optional): Wait interval (ms) after task \"\"\" if text : cmd = ( \"var elementfocused = document.activeElement;\" \"function copyStringToClipboard(str) {\" \" var el = document.createElement('textarea');\" \" el.value = str;\" \" el.setAttribute('readonly', '');\" \" el.style = { position: 'absolute', left: '-9999px' };\" \" document.body.appendChild(el);\" \" el.select();\" \" document.execCommand('copy');\" \" document.body.removeChild(el);\" \"}\" f \"copyStringToClipboard(' { text } ');\" \"elementfocused.focus();\" ) self . execute_javascript ( cmd ) self . sleep ( 500 ) self . control_v () delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) release_shift ( self ) Release key Shift. This method needs to be invoked after holding Shift or similar. Source code in web/bot.py def release_shift ( self ): \"\"\" Release key Shift. This method needs to be invoked after holding Shift or similar. \"\"\" self . _shift_hold = False right_click ( self , wait_after = 300 , * , clicks = 1 , interval_between_clicks = 0 ) Right click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. 300 clicks int Number of times to click. Defaults to 1. 1 interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 Source code in web/bot.py @only_if_element def right_click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 ): \"\"\" Right click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. \"\"\" x , y = self . state . center () self . click_at ( x , y , clicks = clicks , button = 'right' , interval = interval_between_clicks ) self . sleep ( wait_after ) right_click_at ( self , x , y ) Right click at the coordinate defined by x and y Parameters: Name Type Description Default x int The X coordinate required y int The Y coordinate required Source code in web/bot.py def right_click_at ( self , x , y ): \"\"\" Right click at the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" self . click_at ( x , y , button = 'right' ) right_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = 300 ) Right Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 wait_after int Interval to wait after clicking on the element. 300 Source code in web/bot.py @only_if_element def right_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Right Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" x = self . state . x () + x y = self . state . y () + y self . click_relative ( x , y , wait_after = wait_after , interval_between_clicks = interval_between_clicks , button = 'right' ) save_screenshot ( self , path ) Saves a screenshot in a given path. Parameters: Name Type Description Default path str The filepath in which to save the screenshot required Source code in web/bot.py def save_screenshot ( self , path ): \"\"\" Saves a screenshot in a given path. Args: path (str): The filepath in which to save the screenshot \"\"\" self . screenshot ( path ) screen_cut ( self , x , y , width = None , height = None ) Capture a screenshot from a region of the screen. Parameters: Name Type Description Default x int region start position x required y int region start position y required width int region width None height int region height None Returns: Type Description Image The screenshot Image object Source code in web/bot.py def screen_cut ( self , x , y , width = None , height = None ): \"\"\" Capture a screenshot from a region of the screen. Args: x (int): region start position x y (int): region start position y width (int): region width height (int): region height Returns: Image: The screenshot Image object \"\"\" screen_size = self . get_viewport_size () x = x or 0 y = y or 0 width = width or screen_size . width height = height or screen_size . height img = self . screenshot ( region = ( x , y , width , height )) return img screenshot ( self , filepath = None , region = None ) Capture a screenshot. Parameters: Name Type Description Default filepath str The filepath in which to save the screenshot. Defaults to None. None region tuple Bounding box containing left, top, width and height to crop screenshot. None Returns: Type Description Image The screenshot Image object Source code in web/bot.py def screenshot ( self , filepath = None , region = None ): \"\"\" Capture a screenshot. Args: filepath (str, optional): The filepath in which to save the screenshot. Defaults to None. region (tuple, optional): Bounding box containing left, top, width and height to crop screenshot. Returns: Image: The screenshot Image object \"\"\" img = self . get_screen_image ( region ) if filepath : img . save ( filepath ) return img scroll_down ( self , clicks ) Scroll Down n clicks Parameters: Name Type Description Default clicks int Number of times to scroll down. required Source code in web/bot.py def scroll_down ( self , clicks ): \"\"\" Scroll Down n clicks Args: clicks (int): Number of times to scroll down. \"\"\" for i in range ( clicks ): self . _input . dispatchKeyEvent ( type = \"keyDown\" , commands = [ \"ScrollLineDown\" ]) self . sleep ( 200 ) self . _input . dispatchKeyEvent ( type = \"keyUp\" , commands = [ \"ScrollLineDown\" ]) scroll_up ( self , clicks ) Scroll Up n clicks Parameters: Name Type Description Default clicks int Number of times to scroll up. required Source code in web/bot.py def scroll_up ( self , clicks ): \"\"\" Scroll Up n clicks Args: clicks (int): Number of times to scroll up. \"\"\" for i in range ( clicks ): self . _input . dispatchKeyEvent ( type = \"keyDown\" , commands = [ \"ScrollLineUp\" ]) self . sleep ( 200 ) self . _input . dispatchKeyEvent ( type = \"keyUp\" , commands = [ \"ScrollLineUp\" ]) set_download_folder ( self , path = None ) Set the destination folder for downloads. Parameters: Name Type Description Default path str The desired path. None Source code in web/bot.py def set_download_folder ( self , path = None ): \"\"\" Set the destination folder for downloads. Args: path (str): The desired path. \"\"\" if path : self . _download_folder_path = path if not self . _devtools_service : return self . _devtools_service . Browser . setDownloadBehavior ( behavior = \"allow\" , browserContextId = None , downloadPath = self . _download_folder_path , eventsEnabled = True ) set_screen_resolution ( self , width = None , height = None ) Configures the browser dimensions. Parameters: Name Type Description Default width int The desired width. None height int The desired height. None Source code in web/bot.py def set_screen_resolution ( self , width = None , height = None ): \"\"\" Configures the browser dimensions. Args: width (int): The desired width. height (int): The desired height. \"\"\" width = width or self . _dimensions [ 0 ] height = height or self . _dimensions [ 1 ] bounds = { \"left\" : 0 , \"top\" : 0 , \"width\" : width , \"height\" : height } window_id = self . get_window_id () self . _devtools_service . Browser . setWindowBounds ( windowId = window_id , bounds = bounds ) self . _devtools_service . Emulation . setVisibleSize ( width = width , height = height ) sleep ( self , interval ) Wait / Sleep for a given interval. Parameters: Name Type Description Default interval int Interval in milliseconds required Source code in web/bot.py def sleep ( self , interval ): \"\"\" Wait / Sleep for a given interval. Args: interval (int): Interval in milliseconds \"\"\" self . wait ( interval ) space ( self , wait = 0 ) Press Space key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def space ( self , wait = 0 ): \"\"\" Press Space key Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Up\" , virtual_kc = 32 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) start_browser ( self ) Start the Chrome Browser and sets up the permissions required. Source code in web/bot.py def start_browser ( self ): \"\"\" Start the Chrome Browser and sets up the permissions required. \"\"\" if not self . _chrome_launcher : self . _chrome_launcher = ChromeLauncher ( headless = self . headless ) self . _chrome_launcher . launch () if not self . _devtools_service : self . _devtools_service = PyChromeDevTools . ChromeInterface ( host = self . _ip , port = self . _chrome_launcher . devtools_port , auto_connect = False ) self . sleep ( 100 ) self . _devtools_service . connect () self . _page = self . _devtools_service . Page self . _page . enable () self . _network = self . _devtools_service . Network self . _input = self . _devtools_service . Input self . _network . enable () self . _run = self . _devtools_service . Runtime self . _run . enable () self . _devtools_service . Accessibility . enable () self . _devtools_service . ApplicationCache . enable () self . set_download_folder () permissions = [ \"accessibilityEvents\" , \"audioCapture\" , \"backgroundSync\" , \"backgroundFetch\" , \"clipboardReadWrite\" , \"clipboardSanitizedWrite\" , \"displayCapture\" , \"durableStorage\" , \"flash\" , \"geolocation\" , \"midi\" , \"midiSysex\" , \"nfc\" , \"notifications\" , \"paymentHandler\" , \"videoCapture\" , \"idleDetection\" ] self . _devtools_service . Browser . grantPermissions ( permissions = permissions ) stop_browser ( self ) Stops the Chrome browser and clean up the User Data Directory. Source code in web/bot.py def stop_browser ( self ): \"\"\" Stops the Chrome browser and clean up the User Data Directory. \"\"\" try : self . _devtools_service . Browser . close () time . sleep ( 1 ) except ( BrokenPipeError , websocket . WebSocketConnectionClosedException ): # Likely the connection as interrupted already or it timed-out pass self . _chrome_launcher . shutdown () tab ( self , wait = 0 ) Press key Tab Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def tab ( self , wait = 0 ): \"\"\" Press key Tab Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Tab\" , virtual_kc = 9 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) triple_click ( self , wait_after = 300 ) Triple Click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. 300 Source code in web/bot.py @only_if_element def triple_click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Triple Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" x , y = self . state . center () self . click ( x , y , wait_after = wait_after , click = 3 ) triple_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = 300 ) Triple Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 wait_after int Interval to wait after clicking on the element. 300 Source code in web/bot.py @only_if_element def triple_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Triple Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" x = self . state . x () + x y = self . state . y () + y self . click_relative ( x , y , wait_after = wait_after , click = 3 , interval_between_clicks = interval_between_clicks ) type_down ( self , wait = 0 ) Press Down key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def type_down ( self , wait = 0 ): \"\"\" Press Down key Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Down\" , virtual_kc = 40 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) type_keys ( self , keys ) Press a sequence of keys. Hold the keys in the specific order and releases them. Parameters: Name Type Description Default keys list List of keys to be pressed required Source code in web/bot.py def type_keys ( self , keys ): \"\"\" Press a sequence of keys. Hold the keys in the specific order and releases them. Args: keys (list): List of keys to be pressed \"\"\" self . type_keys_with_interval ( 100 , keys ) type_keys_with_interval ( self , interval , keys ) Press a sequence of keys. Hold the keys in the specific order and releases them. Parameters: Name Type Description Default interval int Interval (ms) in which to press and release keys required keys list List of keys to be pressed required Source code in web/bot.py def type_keys_with_interval ( self , interval , keys ): \"\"\" Press a sequence of keys. Hold the keys in the specific order and releases them. Args: interval (int): Interval (ms) in which to press and release keys keys (list): List of keys to be pressed \"\"\" # TODO: Implement this method raise NotImplementedError () type_left ( self , wait = 0 ) Press Left key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def type_left ( self , wait = 0 ): \"\"\" Press Left key Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Left\" , virtual_kc = 37 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) type_right ( self , wait = 0 ) Press Right key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def type_right ( self , wait = 0 ): \"\"\" Press Right key Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Right\" , virtual_kc = 39 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) type_up ( self , wait = 0 ) Press Up key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def type_up ( self , wait = 0 ): \"\"\" Press Up key Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Up\" , virtual_kc = 38 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) wait ( self , interval ) Wait / Sleep for a given interval. Parameters: Name Type Description Default interval int Interval in milliseconds required Source code in web/bot.py def wait ( self , interval ): \"\"\" Wait / Sleep for a given interval. Args: interval (int): Interval in milliseconds \"\"\" time . sleep ( interval / 1000.0 )","title":"Framework"},{"location":"bot.html#framework","text":"The botcity.web module contains specialized implementations aimed at Desktop automation such as WebBot which is described below. You are expected to implement the action method of the DesktopBot class in your Bot class. Here is a very brief example of a bot which opens the BotCity website: from botcity.web import WebBot class Bot ( WebBot ): def action ( self , execution ): # Configure whether or not to run on headless mode self . headless = False # Opens the BotCity website. self . browse ( \"https://botcity.dev/en\" ) # Stop the browser and clean up self . stop_browser () if __name__ == '__main__' : Bot . main ()","title":"Framework"},{"location":"bot.html#botcity.web.bot.WebBot","text":"Base class for Web Bots. Users must implement the action method in their classes. Attributes: Name Type Description state State The internal state of this bot. maestro BotMaestroSDK an instance to interact with the BotMaestro server.","title":"WebBot"},{"location":"bot.html#botcity.web.bot.WebBot.add_image","text":"Add an image into the state image map. Parameters: Name Type Description Default label str The image identifier required path str The path for the image on disk required Source code in web/bot.py def add_image ( self , label , path ): \"\"\" Add an image into the state image map. Args: label (str): The image identifier path (str): The path for the image on disk \"\"\" self . state . map_images [ label ] = path","title":"add_image()"},{"location":"bot.html#botcity.web.bot.WebBot.backspace","text":"Press Backspace key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def backspace ( self , wait = 0 ): \"\"\" Press Backspace key Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Back Space\" , virtual_kc = 0x8 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"backspace()"},{"location":"bot.html#botcity.web.bot.WebBot.browse","text":"Opens the browser on the given URL. Parameters: Name Type Description Default url str The URL to be visited. required wait bool Whether or not to wait for the loadEvent fo be fired. Defaults to False. False Source code in web/bot.py def browse ( self , url , wait = False ): \"\"\" Opens the browser on the given URL. Args: url (str): The URL to be visited. wait (bool): Whether or not to wait for the loadEvent fo be fired. Defaults to False. \"\"\" self . navigate_to ( url , wait = wait )","title":"browse()"},{"location":"bot.html#botcity.web.bot.WebBot.click","text":"Click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. 300 clicks int Number of times to click. Defaults to 1. 1 interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 button str One of 'left', 'right', 'middle'. Defaults to 'left' 'left' Source code in web/bot.py @only_if_element def click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' ): \"\"\" Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" x , y = self . state . center () self . click_at ( x , y , clicks = clicks , button = button , interval_between_clicks = interval_between_clicks ) self . sleep ( wait_after )","title":"click()"},{"location":"bot.html#botcity.web.bot.WebBot.click_at","text":"Click at the coordinate defined by x and y Parameters: Name Type Description Default x int The X coordinate required y int The Y coordinate required clicks int Number of times to click. Defaults to 1. 1 interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 button str One of 'left', 'right', 'middle'. Defaults to 'left' 'left' Source code in web/bot.py def click_at ( self , x , y , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' ): \"\"\" Click at the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" button_idx = [ \"None\" , \"left\" , \"right\" , \"middle\" ] idx = button_idx . index ( button ) self . _x = x self . _y = y for i in range ( clicks ): self . _input . dispatchMouseEvent ( type = \"mousePressed\" , x = x , y = y , button = button , buttons = idx , clickCount = 1 ) self . _input . dispatchMouseEvent ( type = \"mouseReleased\" , x = x , y = y , button = button , buttons = idx , clickCount = 1 ) self . sleep ( interval_between_clicks )","title":"click_at()"},{"location":"bot.html#botcity.web.bot.WebBot.click_on","text":"Click on the element. Parameters: Name Type Description Default label str The image identifier required Source code in web/bot.py @only_if_element def click_on ( self , label ): \"\"\" Click on the element. Args: label (str): The image identifier \"\"\" x , y = self . get_element_coords_centered ( label ) self . click ( x , y )","title":"click_on()"},{"location":"bot.html#botcity.web.bot.WebBot.click_relative","text":"Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required wait_after int Interval to wait after clicking on the element. 300 clicks int Number of times to click. Defaults to 1. 1 interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 button str One of 'left', 'right', 'middle'. Defaults to 'left' 'left' Source code in web/bot.py @only_if_element def click_relative ( self , x , y , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 , button = 'left' ): \"\"\" Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. button (str, optional): One of 'left', 'right', 'middle'. Defaults to 'left' \"\"\" x = self . state . x () + x y = self . state . y () + y self . click_at ( x , y , clicks = clicks , button = button , interval_between_clicks = interval_between_clicks ) self . sleep ( wait_after )","title":"click_relative()"},{"location":"bot.html#botcity.web.bot.WebBot.control_a","text":"Press keys CTRL+A Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def control_a ( self , wait = 0 ): \"\"\" Press keys CTRL+A Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _input . dispatchKeyEvent ( type = \"keyDown\" , commands = [ \"SelectAll\" ]) self . _input . dispatchKeyEvent ( type = \"keyUp\" , commands = [ \"SelectAll\" ]) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"control_a()"},{"location":"bot.html#botcity.web.bot.WebBot.control_c","text":"Press keys CTRL+C Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def control_c ( self , wait = 0 ): \"\"\" Press keys CTRL+C Args: wait (int, optional): Wait interval (ms) after task \"\"\" cmd = ( \"var text = '';\" \"if (window.getSelection) {\" \" text = window.getSelection().toString();\" \"} else if (document.selection && document.selection.type != 'Control') {\" \" text = document.selection.createRange().text;\" \"}\" ) self . execute_javascript ( cmd ) cmd = ( \"if( null == document.getElementById('clipboardTransferText')) {\" \" let el = document.createElement('textarea');\" \" el.value = '';\" \" el.setAttribute('readonly', '');\" \" el.style = {position: 'absolute', left: '-9999px'};\" \" el.id = 'clipboardTransferText';\" \" document.body.appendChild(el);\" \"}\" \"document.getElementById('clipboardTransferText').value = text;\" ) self . execute_javascript ( cmd ) self . _input . dispatchKeyEvent ( type = \"keyDown\" , commands = [ \"Copy\" ]) self . _input . dispatchKeyEvent ( type = \"keyUp\" , commands = [ \"Copy\" ]) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"control_c()"},{"location":"bot.html#botcity.web.bot.WebBot.control_v","text":"Press keys CTRL+V Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def control_v ( self , wait = 0 ): \"\"\" Press keys CTRL+V Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _input . dispatchKeyEvent ( type = \"keyDown\" , commands = [ \"Paste\" ]) self . _input . dispatchKeyEvent ( type = \"keyUp\" , commands = [ \"Paste\" ]) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"control_v()"},{"location":"bot.html#botcity.web.bot.WebBot.copy_to_clipboard","text":"Copy content to the clipboard. Parameters: Name Type Description Default text str The text to be copied. required wait int Wait interval (ms) after task 0 Source code in web/bot.py def copy_to_clipboard ( self , text , wait = 0 ): \"\"\" Copy content to the clipboard. Args: text (str): The text to be copied. wait (int, optional): Wait interval (ms) after task \"\"\" if not self . headless : pyperclip . copy ( text ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay ) else : raise RuntimeError ( \"The clipboard functionality is only available outside of Headless mode.\" )","title":"copy_to_clipboard()"},{"location":"bot.html#botcity.web.bot.WebBot.delete","text":"Press Delete key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def delete ( self , wait = 0 ): \"\"\" Press Delete key Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Delete\" , virtual_kc = 46 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"delete()"},{"location":"bot.html#botcity.web.bot.WebBot.display_size","text":"Returns the display size in pixels. Returns: Type Description size (Tuple) The screen dimension (width and height) in pixels. Source code in web/bot.py def display_size ( self ): \"\"\" Returns the display size in pixels. Returns: size (Tuple): The screen dimension (width and height) in pixels. \"\"\" screen_size = self . get_viewport_size () return screen_size . width , screen_size . height","title":"display_size()"},{"location":"bot.html#botcity.web.bot.WebBot.double_click","text":"Double Click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. 300 Source code in web/bot.py @only_if_element def double_click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Double Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" x , y = self . state . center () self . click ( x , y , wait_after = wait_after , click = 2 )","title":"double_click()"},{"location":"bot.html#botcity.web.bot.WebBot.double_click_relative","text":"Double Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 wait_after int Interval to wait after clicking on the element. 300 Source code in web/bot.py @only_if_element def double_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Double Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" x = self . state . x () + x y = self . state . y () + y self . click_relative ( x , y , wait_after = wait_after , click = 2 , interval_between_clicks = interval_between_clicks )","title":"double_click_relative()"},{"location":"bot.html#botcity.web.bot.WebBot.enter","text":"Press key Enter Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def enter ( self , wait = 0 ): \"\"\" Press key Enter Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Enter\" , virtual_kc = 13 , text = \" \\r \" ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"enter()"},{"location":"bot.html#botcity.web.bot.WebBot.execute_javascript","text":"Execute the given javascript code. Parameters: Name Type Description Default code str The code to be executed. required Returns: Type Description value (object) Returns the code output or None if not available or if an error happens. Source code in web/bot.py def execute_javascript ( self , code ): \"\"\" Execute the given javascript code. Args: code (str): The code to be executed. Returns: value (object): Returns the code output or None if not available or if an error happens. \"\"\" # TODO: Check for errors and return the error as well output = self . _run . evaluate ( expression = code ) if output : result = output [ 0 ][ 'result' ] . get ( 'result' ) if result : return result . get ( 'value' ) return None","title":"execute_javascript()"},{"location":"bot.html#botcity.web.bot.WebBot.find","text":"Find an element defined by label on screen until a timeout happens. Parameters: Name Type Description Default label str The image identifier required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True grayscale bool Whether or not to convert to grayscale before searching. Defaults to False. False Returns: Type Description element (NamedTuple) The element coordinates. None if not found. Source code in web/bot.py def find ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" return self . find_until ( label = label , x = x , y = y , width = width , height = height , threshold = threshold , matching = matching , waiting_time = waiting_time , best = best , grayscale = grayscale )","title":"find()"},{"location":"bot.html#botcity.web.bot.WebBot.find_multiple","text":"Find multiple elements defined by label on screen until a timeout happens. Parameters: Name Type Description Default labels list A list of image identifiers required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True grayscale bool Whether or not to convert to grayscale before searching. Defaults to False. False Returns: Type Description results (dict) A dictionary in which the key is the label and value are the element coordinates in a NamedTuple. Source code in web/bot.py def find_multiple ( self , labels , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ): \"\"\" Find multiple elements defined by label on screen until a timeout happens. Args: labels (list): A list of image identifiers x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: results (dict): A dictionary in which the key is the label and value are the element coordinates in a NamedTuple. \"\"\" def _to_dict ( lbs , elems ): return { k : v for k , v in zip ( lbs , elems )} screen_w , screen_h = self . get_viewport_size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) results = [ None ] * len ( labels ) paths = [ self . state . map_images [ la ] for la in labels ] if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) if not best : # TODO: Implement best=False. print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) start_time = time . time () n_cpus = multiprocessing . cpu_count () - 1 while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return _to_dict ( labels , results ) haystack = self . screenshot () helper = functools . partial ( self . __find_multiple_helper , haystack , region , matching , grayscale ) with multiprocessing . Pool ( processes = n_cpus ) as pool : results = pool . map ( helper , paths ) results = [ r for r in results ] if None in results : continue else : return _to_dict ( labels , results )","title":"find_multiple()"},{"location":"bot.html#botcity.web.bot.WebBot.find_text","text":"Find an element defined by label on screen until a timeout happens. Parameters: Name Type Description Default label str The image identifier required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True Returns: Type Description element (NamedTuple) The element coordinates. None if not found. Source code in web/bot.py def find_text ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" return self . find_until ( label , x , y , width , height , threshold = threshold , matching = matching , waiting_time = waiting_time , best = best , grayscale = True )","title":"find_text()"},{"location":"bot.html#botcity.web.bot.WebBot.find_until","text":"Find an element defined by label on screen until a timeout happens. Parameters: Name Type Description Default label str The image identifier required x int Search region start position x. Defaults to 0. None y int Search region start position y. Defaults to 0. None width int Search region width. Defaults to screen width. None height int Search region height. Defaults to screen height. None threshold int The threshold to be applied when doing grayscale search. Defaults to None. None matching float The matching index ranging from 0 to 1. Defaults to 0.9. 0.9 waiting_time int Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). 10000 best bool Whether or not to keep looking until the best matching is found. Defaults to True. True grayscale bool Whether or not to convert to grayscale before searching. Defaults to False. False Returns: Type Description element (NamedTuple) The element coordinates. None if not found. Source code in web/bot.py def find_until ( self , label , x = None , y = None , width = None , height = None , * , threshold = None , matching = 0.9 , waiting_time = 10000 , best = True , grayscale = False ): \"\"\" Find an element defined by label on screen until a timeout happens. Args: label (str): The image identifier x (int, optional): Search region start position x. Defaults to 0. y (int, optional): Search region start position y. Defaults to 0. width (int, optional): Search region width. Defaults to screen width. height (int, optional): Search region height. Defaults to screen height. threshold (int, optional): The threshold to be applied when doing grayscale search. Defaults to None. matching (float, optional): The matching index ranging from 0 to 1. Defaults to 0.9. waiting_time (int, optional): Maximum wait time (ms) to search for a hit. Defaults to 10000ms (10s). best (bool, optional): Whether or not to keep looking until the best matching is found. Defaults to True. grayscale (bool, optional): Whether or not to convert to grayscale before searching. Defaults to False. Returns: element (NamedTuple): The element coordinates. None if not found. \"\"\" self . state . element = None screen_w , screen_h = self . get_viewport_size () x = x or 0 y = y or 0 w = width or screen_w h = height or screen_h region = ( x , y , w , h ) element_path = self . state . map_images [ label ] if threshold : # TODO: Figure out how we should do threshold print ( 'Threshold not yet supported' ) if not best : # TODO: Implement best=False. print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) start_time = time . time () while True : elapsed_time = ( time . time () - start_time ) * 1000 if elapsed_time > waiting_time : return None haystack = self . get_screen_image ( region = region ) it = cv2find . locate_all_opencv ( element_path , haystack_image = haystack , region = region , confidence = matching , grayscale = grayscale ) try : ele = next ( it ) except StopIteration : ele = None self . state . element = ele return ele","title":"find_until()"},{"location":"bot.html#botcity.web.bot.WebBot.get_clipboard","text":"Get the current content in the clipboard. Returns: Type Description text (str) Current clipboard content Source code in web/bot.py def get_clipboard ( self ): \"\"\" Get the current content in the clipboard. Returns: text (str): Current clipboard content \"\"\" ret = self . execute_javascript ( \"document.getElementById('clipboardTransferText').value\" ) if ret : self . _last_clipboard = ret self . execute_javascript ( \"document.getElementById('clipboardTransferText').remove();\" ) return ret return self . _last_clipboard","title":"get_clipboard()"},{"location":"bot.html#botcity.web.bot.WebBot.get_element_coords","text":"Find an element defined by label on screen and returns its coordinates. Parameters: Name Type Description Default label str The image identifier required x int X (Left) coordinate of the search area. None y int Y (Top) coordinate of the search area. None width int Width of the search area. None height int Height of the search area. None matching float Minimum score to consider a match in the element image recognition process. Defaults to 0.9. 0.9 best bool Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. True Returns: Type Description coords (Tuple) A tuple containing the x and y coordinates for the element. Source code in web/bot.py def get_element_coords ( self , label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True ): \"\"\" Find an element defined by label on screen and returns its coordinates. Args: label (str): The image identifier x (int, optional): X (Left) coordinate of the search area. y (int, optional): Y (Top) coordinate of the search area. width (int, optional): Width of the search area. height (int, optional): Height of the search area. matching (float, optional): Minimum score to consider a match in the element image recognition process. Defaults to 0.9. best (bool, optional): Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. Returns: coords (Tuple): A tuple containing the x and y coordinates for the element. \"\"\" self . state . element = None screen_size = self . get_viewport_size () x = x or 0 y = y or 0 width = width or screen_size . width height = height or screen_size . height region = ( x , y , width , height ) if not best : print ( 'Warning: Ignoring best=False for now. It will be supported in the future.' ) it = cv2find . locate_all_opencv ( self . state . map_images [ label ], region = region , confidence = matching ) try : ele = next ( it ) except StopIteration : ele = None self . state . element = ele if ele : return ele . left , ele . top else : return None , None","title":"get_element_coords()"},{"location":"bot.html#botcity.web.bot.WebBot.get_element_coords_centered","text":"Find an element defined by label on screen and returns its centered coordinates. Parameters: Name Type Description Default label str The image identifier required x int X (Left) coordinate of the search area. None y int Y (Top) coordinate of the search area. None width int Width of the search area. None height int Height of the search area. None matching float Minimum score to consider a match in the element image recognition process. Defaults to 0.9. 0.9 best bool Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. True Returns: Type Description coords (Tuple) A tuple containing the x and y coordinates for the center of the element. Source code in web/bot.py def get_element_coords_centered ( self , label , x = None , y = None , width = None , height = None , matching = 0.9 , best = True ): \"\"\" Find an element defined by label on screen and returns its centered coordinates. Args: label (str): The image identifier x (int, optional): X (Left) coordinate of the search area. y (int, optional): Y (Top) coordinate of the search area. width (int, optional): Width of the search area. height (int, optional): Height of the search area. matching (float, optional): Minimum score to consider a match in the element image recognition process. Defaults to 0.9. best (bool, optional): Whether or not to search for the best value. If False the method returns on the first find. Defaults to True. Returns: coords (Tuple): A tuple containing the x and y coordinates for the center of the element. \"\"\" self . get_element_coords ( label , x , y , width , height , matching , best ) return self . state . center ()","title":"get_element_coords_centered()"},{"location":"bot.html#botcity.web.bot.WebBot.get_image_from_map","text":"Return an image from teh state image map. Parameters: Name Type Description Default label str The image identifier required Returns: Type Description Image The Image object Source code in web/bot.py def get_image_from_map ( self , label ): \"\"\" Return an image from teh state image map. Args: label (str): The image identifier Returns: Image: The Image object \"\"\" path = self . state . map_images . get ( label ) if not path : raise KeyError ( 'Invalid label for image map.' ) img = Image . open ( path ) return img","title":"get_image_from_map()"},{"location":"bot.html#botcity.web.bot.WebBot.get_last_element","text":"Return the last element found. Returns: Type Description element (NamedTuple) The element coordinates (left, top, width, height) Source code in web/bot.py def get_last_element ( self ): \"\"\" Return the last element found. Returns: element (NamedTuple): The element coordinates (left, top, width, height) \"\"\" return self . state . element","title":"get_last_element()"},{"location":"bot.html#botcity.web.bot.WebBot.get_last_x","text":"Get the last X position for the mouse. Returns: Type Description x (int) The last x position for the mouse. Source code in web/bot.py @only_if_element def get_last_x ( self ): \"\"\" Get the last X position for the mouse. Returns: x (int): The last x position for the mouse. \"\"\" return self . _x","title":"get_last_x()"},{"location":"bot.html#botcity.web.bot.WebBot.get_last_y","text":"Get the last Y position for the mouse. Returns: Type Description y (int) The last y position for the mouse. Source code in web/bot.py def get_last_y ( self ): \"\"\" Get the last Y position for the mouse. Returns: y (int): The last y position for the mouse. \"\"\" return self . _y","title":"get_last_y()"},{"location":"bot.html#botcity.web.bot.WebBot.get_screen_image","text":"Capture and returns a screenshot from the browser. Parameters: Name Type Description Default region tuple A tuple containing the left, top, width and height to crop the screen image. None Returns: Type Description image (Image) The screenshot Image object. Source code in web/bot.py def get_screen_image ( self , region = None ): \"\"\" Capture and returns a screenshot from the browser. Args: region (tuple): A tuple containing the left, top, width and height to crop the screen image. Returns: image (Image): The screenshot Image object. \"\"\" if not region : region = ( 0 , 0 , 0 , 0 ) layout_metrics = self . _page . getLayoutMetrics ()[ 0 ] if layout_metrics : content_size = layout_metrics [ 'result' ][ 'contentSize' ] x = region [ 0 ] or 0 y = region [ 1 ] or 0 width = region [ 2 ] or content_size [ 'width' ] height = region [ 3 ] or content_size [ 'height' ] else : x = 0 y = 0 width = self . _dimensions [ 0 ] height = self . _dimensions [ 1 ] viewport = dict ( x = x , y = y , width = width , height = height , scale = 1 ) data = self . _page . captureScreenshot ( format = \"png\" , quality = 100 , clip = viewport , fromSurface = True , captureBeyondViewport = False ) data = data [ 0 ][ 'result' ][ 'data' ] image = base64 . b64decode ( data ) return Image . open ( io . BytesIO ( image ))","title":"get_screen_image()"},{"location":"bot.html#botcity.web.bot.WebBot.get_screenshot","text":"Capture a screenshot. Parameters: Name Type Description Default filepath str The filepath in which to save the screenshot. Defaults to None. None region tuple Bounding box containing left, top, width and height to crop screenshot. None Returns: Type Description Image The screenshot Image object Source code in web/bot.py def get_screenshot ( self , filepath = None , region = None ): \"\"\" Capture a screenshot. Args: filepath (str, optional): The filepath in which to save the screenshot. Defaults to None. region (tuple, optional): Bounding box containing left, top, width and height to crop screenshot. Returns: Image: The screenshot Image object \"\"\" return self . screenshot ( filepath , region )","title":"get_screenshot()"},{"location":"bot.html#botcity.web.bot.WebBot.get_viewport_size","text":"Returns the browser current viewport size. Returns: Type Description width (int) The current viewport width. height (int): The current viewport height. Source code in web/bot.py def get_viewport_size ( self ): \"\"\" Returns the browser current viewport size. Returns: width (int): The current viewport width. height (int): The current viewport height. \"\"\" layout_metrics = self . _page . getLayoutMetrics () content_size = layout_metrics [ 0 ][ 'result' ][ 'contentSize' ] width = content_size [ 'width' ] height = content_size [ 'height' ] return width , height","title":"get_viewport_size()"},{"location":"bot.html#botcity.web.bot.WebBot.get_window_id","text":"Fetch the current window Id Returns: Type Description id (str) The window Id Source code in web/bot.py def get_window_id ( self ): \"\"\" Fetch the current window Id Returns: id (str): The window Id \"\"\" return self . _devtools_service . Browser . getWindowForTarget ()[ 0 ][ 'result' ][ 'windowId' ]","title":"get_window_id()"},{"location":"bot.html#botcity.web.bot.WebBot.hold_shift","text":"Hold key Shift Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def hold_shift ( self , wait = 0 ): \"\"\" Hold key Shift Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _shift_hold = True delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"hold_shift()"},{"location":"bot.html#botcity.web.bot.WebBot.kb_type","text":"Type a text char by char (individual key events). Parameters: Name Type Description Default text str text to be typed. required interval int interval (ms) between each key press. Defaults to 0 0 Source code in web/bot.py def kb_type ( self , text , interval = 0 ): \"\"\" Type a text char by char (individual key events). Args: text (str): text to be typed. interval (int, optional): interval (ms) between each key press. Defaults to 0 \"\"\" for c in text : self . _dispatch_key_event ( event_type = \"char\" , text = c , execute_up = False ) self . sleep ( interval ) self . sleep ( config . DEFAULT_SLEEP_AFTER_ACTION )","title":"kb_type()"},{"location":"bot.html#botcity.web.bot.WebBot.key_end","text":"Press key End Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def key_end ( self , wait = 0 ): \"\"\" Press key End Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"End\" , virtual_kc = 35 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"key_end()"},{"location":"bot.html#botcity.web.bot.WebBot.key_enter","text":"Press key Right Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def key_enter ( self , wait = 0 ): \"\"\" Press key Right Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . enter ( wait )","title":"key_enter()"},{"location":"bot.html#botcity.web.bot.WebBot.key_esc","text":"Press key Esc Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def key_esc ( self , wait = 0 ): \"\"\" Press key Esc Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Escape\" , virtual_kc = 27 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"key_esc()"},{"location":"bot.html#botcity.web.bot.WebBot.key_right","text":"Press key Right Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def key_right ( self , wait = 0 ): \"\"\" Press key Right Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Right\" , virtual_kc = 0x27 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"key_right()"},{"location":"bot.html#botcity.web.bot.WebBot.maximize_window","text":"Shortcut to maximize window on Windows OS. Source code in web/bot.py def maximize_window ( self ): \"\"\" Shortcut to maximize window on Windows OS. \"\"\" bounds = dict ( left = 0 , top = 0 , width = 0 , height = 0 , windowState = \"maximized\" ) self . _devtools_service . Browser . setWindowBounds ( windowId = self . get_window_id (), bounds = bounds ) self . sleep ( 1000 )","title":"maximize_window()"},{"location":"bot.html#botcity.web.bot.WebBot.mouse_move","text":"Mouse the move to the coordinate defined by x and y Parameters: Name Type Description Default x int The X coordinate required y int The Y coordinate required Source code in web/bot.py def mouse_move ( self , x , y ): \"\"\" Mouse the move to the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" self . _x = x self . _y = y self . _input . dispatchMouseEvent ( type = \"mouseMoved\" , x = x , y = y )","title":"mouse_move()"},{"location":"bot.html#botcity.web.bot.WebBot.move","text":"Move to the center position of last found item. Source code in web/bot.py @only_if_element def move ( self ): \"\"\" Move to the center position of last found item. \"\"\" x , y = self . state . center () self . move_to ( x , y )","title":"move()"},{"location":"bot.html#botcity.web.bot.WebBot.move_random","text":"Move randomly along the given x, y range. Parameters: Name Type Description Default range_x int Horizontal range required range_y int Vertical range required Source code in web/bot.py def move_random ( self , range_x , range_y ): \"\"\" Move randomly along the given x, y range. Args: range_x (int): Horizontal range range_y (int): Vertical range \"\"\" x = int ( random . random () * range_x ) y = int ( random . random () * range_y ) self . move_to ( x , y )","title":"move_random()"},{"location":"bot.html#botcity.web.bot.WebBot.move_relative","text":"Move the mouse relative to its current position. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required Source code in web/bot.py def move_relative ( self , x , y ): \"\"\" Move the mouse relative to its current position. Args: x (int): Horizontal offset y (int): Vertical offset \"\"\" x = self . get_last_x () + x y = self . get_last_y () + y self . move_to ( x , y )","title":"move_relative()"},{"location":"bot.html#botcity.web.bot.WebBot.move_to","text":"Move the mouse relative to its current position. Parameters: Name Type Description Default x int The X coordinate required y int The Y coordinate required Source code in web/bot.py def move_to ( self , x , y ): \"\"\" Move the mouse relative to its current position. Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" self . _x = x self . _y = y self . _input . dispatchMouseEvent ( type = \"mouseMoved\" , x = x , y = y )","title":"move_to()"},{"location":"bot.html#botcity.web.bot.WebBot.navigate_to","text":"Opens the browser on the given URL. Parameters: Name Type Description Default url str The URL to be visited. required wait bool Whether or not to wait for the loadEvent fo be fired. Defaults to False. False Source code in web/bot.py def navigate_to ( self , url , wait = False ): \"\"\" Opens the browser on the given URL. Args: url (str): The URL to be visited. wait (bool): Whether or not to wait for the loadEvent fo be fired. Defaults to False. \"\"\" self . start_browser () self . set_screen_resolution () self . _page . navigate ( url = url ) if wait : self . _devtools_service . wait_event ( \"Page.frameStoppedLoading\" , timeout = config . DEFAULT_NAVIGATE_TIMEOUT / 1000 )","title":"navigate_to()"},{"location":"bot.html#botcity.web.bot.WebBot.paste","text":"Paste content from the clipboard. Parameters: Name Type Description Default text str The text to be pasted. Defaults to None None wait int Wait interval (ms) after task 0 Source code in web/bot.py def paste ( self , text = None , wait = 0 ): \"\"\" Paste content from the clipboard. Args: text (str, optional): The text to be pasted. Defaults to None wait (int, optional): Wait interval (ms) after task \"\"\" if text : cmd = ( \"var elementfocused = document.activeElement;\" \"function copyStringToClipboard(str) {\" \" var el = document.createElement('textarea');\" \" el.value = str;\" \" el.setAttribute('readonly', '');\" \" el.style = { position: 'absolute', left: '-9999px' };\" \" document.body.appendChild(el);\" \" el.select();\" \" document.execCommand('copy');\" \" document.body.removeChild(el);\" \"}\" f \"copyStringToClipboard(' { text } ');\" \"elementfocused.focus();\" ) self . execute_javascript ( cmd ) self . sleep ( 500 ) self . control_v () delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"paste()"},{"location":"bot.html#botcity.web.bot.WebBot.release_shift","text":"Release key Shift. This method needs to be invoked after holding Shift or similar. Source code in web/bot.py def release_shift ( self ): \"\"\" Release key Shift. This method needs to be invoked after holding Shift or similar. \"\"\" self . _shift_hold = False","title":"release_shift()"},{"location":"bot.html#botcity.web.bot.WebBot.right_click","text":"Right click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. 300 clicks int Number of times to click. Defaults to 1. 1 interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 Source code in web/bot.py @only_if_element def right_click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION , * , clicks = 1 , interval_between_clicks = 0 ): \"\"\" Right click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. clicks (int, optional): Number of times to click. Defaults to 1. interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. \"\"\" x , y = self . state . center () self . click_at ( x , y , clicks = clicks , button = 'right' , interval = interval_between_clicks ) self . sleep ( wait_after )","title":"right_click()"},{"location":"bot.html#botcity.web.bot.WebBot.right_click_at","text":"Right click at the coordinate defined by x and y Parameters: Name Type Description Default x int The X coordinate required y int The Y coordinate required Source code in web/bot.py def right_click_at ( self , x , y ): \"\"\" Right click at the coordinate defined by x and y Args: x (int): The X coordinate y (int): The Y coordinate \"\"\" self . click_at ( x , y , button = 'right' )","title":"right_click_at()"},{"location":"bot.html#botcity.web.bot.WebBot.right_click_relative","text":"Right Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 wait_after int Interval to wait after clicking on the element. 300 Source code in web/bot.py @only_if_element def right_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Right Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" x = self . state . x () + x y = self . state . y () + y self . click_relative ( x , y , wait_after = wait_after , interval_between_clicks = interval_between_clicks , button = 'right' )","title":"right_click_relative()"},{"location":"bot.html#botcity.web.bot.WebBot.save_screenshot","text":"Saves a screenshot in a given path. Parameters: Name Type Description Default path str The filepath in which to save the screenshot required Source code in web/bot.py def save_screenshot ( self , path ): \"\"\" Saves a screenshot in a given path. Args: path (str): The filepath in which to save the screenshot \"\"\" self . screenshot ( path )","title":"save_screenshot()"},{"location":"bot.html#botcity.web.bot.WebBot.screen_cut","text":"Capture a screenshot from a region of the screen. Parameters: Name Type Description Default x int region start position x required y int region start position y required width int region width None height int region height None Returns: Type Description Image The screenshot Image object Source code in web/bot.py def screen_cut ( self , x , y , width = None , height = None ): \"\"\" Capture a screenshot from a region of the screen. Args: x (int): region start position x y (int): region start position y width (int): region width height (int): region height Returns: Image: The screenshot Image object \"\"\" screen_size = self . get_viewport_size () x = x or 0 y = y or 0 width = width or screen_size . width height = height or screen_size . height img = self . screenshot ( region = ( x , y , width , height )) return img","title":"screen_cut()"},{"location":"bot.html#botcity.web.bot.WebBot.screenshot","text":"Capture a screenshot. Parameters: Name Type Description Default filepath str The filepath in which to save the screenshot. Defaults to None. None region tuple Bounding box containing left, top, width and height to crop screenshot. None Returns: Type Description Image The screenshot Image object Source code in web/bot.py def screenshot ( self , filepath = None , region = None ): \"\"\" Capture a screenshot. Args: filepath (str, optional): The filepath in which to save the screenshot. Defaults to None. region (tuple, optional): Bounding box containing left, top, width and height to crop screenshot. Returns: Image: The screenshot Image object \"\"\" img = self . get_screen_image ( region ) if filepath : img . save ( filepath ) return img","title":"screenshot()"},{"location":"bot.html#botcity.web.bot.WebBot.scroll_down","text":"Scroll Down n clicks Parameters: Name Type Description Default clicks int Number of times to scroll down. required Source code in web/bot.py def scroll_down ( self , clicks ): \"\"\" Scroll Down n clicks Args: clicks (int): Number of times to scroll down. \"\"\" for i in range ( clicks ): self . _input . dispatchKeyEvent ( type = \"keyDown\" , commands = [ \"ScrollLineDown\" ]) self . sleep ( 200 ) self . _input . dispatchKeyEvent ( type = \"keyUp\" , commands = [ \"ScrollLineDown\" ])","title":"scroll_down()"},{"location":"bot.html#botcity.web.bot.WebBot.scroll_up","text":"Scroll Up n clicks Parameters: Name Type Description Default clicks int Number of times to scroll up. required Source code in web/bot.py def scroll_up ( self , clicks ): \"\"\" Scroll Up n clicks Args: clicks (int): Number of times to scroll up. \"\"\" for i in range ( clicks ): self . _input . dispatchKeyEvent ( type = \"keyDown\" , commands = [ \"ScrollLineUp\" ]) self . sleep ( 200 ) self . _input . dispatchKeyEvent ( type = \"keyUp\" , commands = [ \"ScrollLineUp\" ])","title":"scroll_up()"},{"location":"bot.html#botcity.web.bot.WebBot.set_download_folder","text":"Set the destination folder for downloads. Parameters: Name Type Description Default path str The desired path. None Source code in web/bot.py def set_download_folder ( self , path = None ): \"\"\" Set the destination folder for downloads. Args: path (str): The desired path. \"\"\" if path : self . _download_folder_path = path if not self . _devtools_service : return self . _devtools_service . Browser . setDownloadBehavior ( behavior = \"allow\" , browserContextId = None , downloadPath = self . _download_folder_path , eventsEnabled = True )","title":"set_download_folder()"},{"location":"bot.html#botcity.web.bot.WebBot.set_screen_resolution","text":"Configures the browser dimensions. Parameters: Name Type Description Default width int The desired width. None height int The desired height. None Source code in web/bot.py def set_screen_resolution ( self , width = None , height = None ): \"\"\" Configures the browser dimensions. Args: width (int): The desired width. height (int): The desired height. \"\"\" width = width or self . _dimensions [ 0 ] height = height or self . _dimensions [ 1 ] bounds = { \"left\" : 0 , \"top\" : 0 , \"width\" : width , \"height\" : height } window_id = self . get_window_id () self . _devtools_service . Browser . setWindowBounds ( windowId = window_id , bounds = bounds ) self . _devtools_service . Emulation . setVisibleSize ( width = width , height = height )","title":"set_screen_resolution()"},{"location":"bot.html#botcity.web.bot.WebBot.sleep","text":"Wait / Sleep for a given interval. Parameters: Name Type Description Default interval int Interval in milliseconds required Source code in web/bot.py def sleep ( self , interval ): \"\"\" Wait / Sleep for a given interval. Args: interval (int): Interval in milliseconds \"\"\" self . wait ( interval )","title":"sleep()"},{"location":"bot.html#botcity.web.bot.WebBot.space","text":"Press Space key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def space ( self , wait = 0 ): \"\"\" Press Space key Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Up\" , virtual_kc = 32 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"space()"},{"location":"bot.html#botcity.web.bot.WebBot.start_browser","text":"Start the Chrome Browser and sets up the permissions required. Source code in web/bot.py def start_browser ( self ): \"\"\" Start the Chrome Browser and sets up the permissions required. \"\"\" if not self . _chrome_launcher : self . _chrome_launcher = ChromeLauncher ( headless = self . headless ) self . _chrome_launcher . launch () if not self . _devtools_service : self . _devtools_service = PyChromeDevTools . ChromeInterface ( host = self . _ip , port = self . _chrome_launcher . devtools_port , auto_connect = False ) self . sleep ( 100 ) self . _devtools_service . connect () self . _page = self . _devtools_service . Page self . _page . enable () self . _network = self . _devtools_service . Network self . _input = self . _devtools_service . Input self . _network . enable () self . _run = self . _devtools_service . Runtime self . _run . enable () self . _devtools_service . Accessibility . enable () self . _devtools_service . ApplicationCache . enable () self . set_download_folder () permissions = [ \"accessibilityEvents\" , \"audioCapture\" , \"backgroundSync\" , \"backgroundFetch\" , \"clipboardReadWrite\" , \"clipboardSanitizedWrite\" , \"displayCapture\" , \"durableStorage\" , \"flash\" , \"geolocation\" , \"midi\" , \"midiSysex\" , \"nfc\" , \"notifications\" , \"paymentHandler\" , \"videoCapture\" , \"idleDetection\" ] self . _devtools_service . Browser . grantPermissions ( permissions = permissions )","title":"start_browser()"},{"location":"bot.html#botcity.web.bot.WebBot.stop_browser","text":"Stops the Chrome browser and clean up the User Data Directory. Source code in web/bot.py def stop_browser ( self ): \"\"\" Stops the Chrome browser and clean up the User Data Directory. \"\"\" try : self . _devtools_service . Browser . close () time . sleep ( 1 ) except ( BrokenPipeError , websocket . WebSocketConnectionClosedException ): # Likely the connection as interrupted already or it timed-out pass self . _chrome_launcher . shutdown ()","title":"stop_browser()"},{"location":"bot.html#botcity.web.bot.WebBot.tab","text":"Press key Tab Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def tab ( self , wait = 0 ): \"\"\" Press key Tab Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Tab\" , virtual_kc = 9 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"tab()"},{"location":"bot.html#botcity.web.bot.WebBot.triple_click","text":"Triple Click on the last found element. Parameters: Name Type Description Default wait_after int Interval to wait after clicking on the element. 300 Source code in web/bot.py @only_if_element def triple_click ( self , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Triple Click on the last found element. Args: wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" x , y = self . state . center () self . click ( x , y , wait_after = wait_after , click = 3 )","title":"triple_click()"},{"location":"bot.html#botcity.web.bot.WebBot.triple_click_relative","text":"Triple Click Relative on the last found element. Parameters: Name Type Description Default x int Horizontal offset required y int Vertical offset required interval_between_clicks int The interval between clicks in ms. Defaults to 0. 0 wait_after int Interval to wait after clicking on the element. 300 Source code in web/bot.py @only_if_element def triple_click_relative ( self , x , y , interval_between_clicks = 0 , wait_after = config . DEFAULT_SLEEP_AFTER_ACTION ): \"\"\" Triple Click Relative on the last found element. Args: x (int): Horizontal offset y (int): Vertical offset interval_between_clicks (int, optional): The interval between clicks in ms. Defaults to 0. wait_after (int, optional): Interval to wait after clicking on the element. \"\"\" x = self . state . x () + x y = self . state . y () + y self . click_relative ( x , y , wait_after = wait_after , click = 3 , interval_between_clicks = interval_between_clicks )","title":"triple_click_relative()"},{"location":"bot.html#botcity.web.bot.WebBot.type_down","text":"Press Down key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def type_down ( self , wait = 0 ): \"\"\" Press Down key Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Down\" , virtual_kc = 40 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"type_down()"},{"location":"bot.html#botcity.web.bot.WebBot.type_keys","text":"Press a sequence of keys. Hold the keys in the specific order and releases them. Parameters: Name Type Description Default keys list List of keys to be pressed required Source code in web/bot.py def type_keys ( self , keys ): \"\"\" Press a sequence of keys. Hold the keys in the specific order and releases them. Args: keys (list): List of keys to be pressed \"\"\" self . type_keys_with_interval ( 100 , keys )","title":"type_keys()"},{"location":"bot.html#botcity.web.bot.WebBot.type_keys_with_interval","text":"Press a sequence of keys. Hold the keys in the specific order and releases them. Parameters: Name Type Description Default interval int Interval (ms) in which to press and release keys required keys list List of keys to be pressed required Source code in web/bot.py def type_keys_with_interval ( self , interval , keys ): \"\"\" Press a sequence of keys. Hold the keys in the specific order and releases them. Args: interval (int): Interval (ms) in which to press and release keys keys (list): List of keys to be pressed \"\"\" # TODO: Implement this method raise NotImplementedError ()","title":"type_keys_with_interval()"},{"location":"bot.html#botcity.web.bot.WebBot.type_left","text":"Press Left key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def type_left ( self , wait = 0 ): \"\"\" Press Left key Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Left\" , virtual_kc = 37 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"type_left()"},{"location":"bot.html#botcity.web.bot.WebBot.type_right","text":"Press Right key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def type_right ( self , wait = 0 ): \"\"\" Press Right key Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Right\" , virtual_kc = 39 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"type_right()"},{"location":"bot.html#botcity.web.bot.WebBot.type_up","text":"Press Up key Parameters: Name Type Description Default wait int Wait interval (ms) after task 0 Source code in web/bot.py def type_up ( self , wait = 0 ): \"\"\" Press Up key Args: wait (int, optional): Wait interval (ms) after task \"\"\" self . _dispatch_key_event ( event_type = \"keyDown\" , key = \"Up\" , virtual_kc = 38 ) delay = max ( 0 , wait or config . DEFAULT_SLEEP_AFTER_ACTION ) self . sleep ( delay )","title":"type_up()"},{"location":"bot.html#botcity.web.bot.WebBot.wait","text":"Wait / Sleep for a given interval. Parameters: Name Type Description Default interval int Interval in milliseconds required Source code in web/bot.py def wait ( self , interval ): \"\"\" Wait / Sleep for a given interval. Args: interval (int): Interval in milliseconds \"\"\" time . sleep ( interval / 1000.0 )","title":"wait()"},{"location":"intro.html","text":"Getting Started After you installed this package, the next step is to import the package into your code and start using the WebBot class to build your RPA pipeline. from botcity.web import * Template Project We created a template project using Cookiecutter to help you create new bots using BotCity's Python Framework. Take a look into the template project website for more information on how to use it and get started. Next Steps Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Getting Started"},{"location":"intro.html#getting-started","text":"After you installed this package, the next step is to import the package into your code and start using the WebBot class to build your RPA pipeline. from botcity.web import *","title":"Getting Started"},{"location":"intro.html#template-project","text":"We created a template project using Cookiecutter to help you create new bots using BotCity's Python Framework. Take a look into the template project website for more information on how to use it and get started.","title":"Template Project"},{"location":"intro.html#next-steps","text":"Check our examples and experiment with the API. Let us know where it can be improved. Have fun automating!","title":"Next Steps"}]}